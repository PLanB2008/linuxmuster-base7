#!/usr/bin/python3
#
# linuxmuster-import-devices
# thomas@linuxmuster.net
# 20200226
#

import configparser
import constants
import csv
import os
import re
import subprocess
import sys

from os import listdir
from os.path import isfile, join

from functions import getGrubOstype
from functions import getGrubPart
from functions import getStartconfOsValues
from functions import getStartconfOption
from functions import getStartconfPartnr
from functions import getStartconfPartlabel
from functions import isValidHostIpv4
from functions import printScript
from functions import readTextfile
from functions import setGlobalStartconfOption
from functions import writeTextfile

# defaults
devices = constants.WIMPORTDATA
core32_efi = 'boot/grub/i386-efi/core.efi'
core64_efi = 'boot/grub/x86_64-efi/core.efi'
core_bios = 'boot/grub/i386-pc/core.0'

# read INIFILE
setup = configparser.ConfigParser(inline_comment_prefixes=('#', ';'))
setup.read(constants.SETUPINI)
serverip = setup.get('setup', 'serverip')
opsiip = setup.get('setup', 'opsiip')
domainname = setup.get('setup', 'domainname')

# start message
printScript(os.path.basename(__file__), 'begin')

# do sophomorix-devices first
msg = 'Starting sophomorix-device syntax check:'
printScript(msg)
result = os.system('sophomorix-device --dry-run')
msg = 'sophomorix-device finished '
if result != 0:
    printScript(msg + ' errors detected!')
    sys.exit(result)

printScript(msg + ' OK!')
os.system('sophomorix-device --sync')


# write grub cfgs
def doGrubCfg(startconf, group, kopts):
    grubcfg = constants.LINBOGRUBDIR + '/' + group + '.cfg'
    rc, content = readTextfile(grubcfg)
    if rc and constants.MANAGEDSTR not in content:
        printScript('  > Keeping pxe configuration.')
        return True
    # get grub partition name of cache
    cache = getStartconfOption(startconf, 'LINBO', 'Cache')
    partnr = getStartconfPartnr(startconf, cache)
    systemtype = getStartconfOption(startconf, 'LINBO', 'SystemType')
    cacheroot = getGrubPart(cache, systemtype)
    cachelabel = getStartconfPartlabel(startconf, partnr)
    # if cache is not defined provide a forced netboot cfg
    if cacheroot is None:
        netboottpl = constants.LINBOTPLDIR + '/grub.cfg.forced_netboot'
        printScript('  > Creating minimal pxe configuration. start.conf is incomplete!')
        rc = os.system('cp ' + netboottpl + ' ' + grubcfg)
        return
    else:
        printScript('  > Creating pxe configuration.')
    # create gobal part for group cfg
    globaltpl = constants.LINBOTPLDIR + '/grub.cfg.global'
    rc, content = readTextfile(globaltpl)
    if not rc:
        return rc
    replace_list = [('@@group@@', group), ('@@cachelabel@@', cachelabel), ('@@cacheroot@@', cacheroot), ('@@kopts@@', kopts)]
    for item in replace_list:
        content = content.replace(item[0], item[1])
    rc = writeTextfile(grubcfg, content, 'w')
    # get os infos from group's start.conf
    oslists = getStartconfOsValues(startconf)
    if oslists is None:
        return False
    # write os parts to grub cfg
    ostpl = constants.LINBOTPLDIR + '/grub.cfg.os'
    for oslist in oslists:
        osname, partition, kernel, initrd, kappend, osnr = oslist
        osroot = getGrubPart(partition, systemtype)
        ostype = getGrubOstype(osname)
        partnr = getStartconfPartnr(startconf, partition)
        oslabel = getStartconfPartlabel(startconf, partnr)
        rc, content = readTextfile(ostpl)
        if not rc:
            return rc
        replace_list = [('@@group@@', group), ('@@cachelabel@@', cachelabel),
            ('@@cacheroot@@', cacheroot), ('@@osname@@', osname),
            ('@@osnr@@', osnr), ('@@ostype@@', ostype), ('@@oslabel@@', oslabel),
            ('@@osroot@@', osroot), ('@@partnr@@', partnr), ('@@kernel@@', kernel),
            ('@@initrd@@', initrd), ('@@kopts@@', kopts), ('@@append@@', kappend)]
        for item in replace_list:
            content = content.replace(item[0], str(item[1]))
        rc = writeTextfile(grubcfg, content, 'a')
        if not rc:
            return rc


# write linbo start configuration file
def doLinboStartconf(group):
    startconf = constants.LINBODIR + '/start.conf.' + group
    # provide simple start.conf if there is none for this group
    if not os.path.isfile(startconf):
        msg = '  > Creating minimal start.conf. Further configuration is necessary!'
        printScript(msg, '', True)
        os.system('cp ' + constants.LINBODIR + '/start.conf ' + startconf)
    # read values from start.conf
    group_s = getStartconfOption(startconf, 'LINBO', 'Group')
    serverip_s = getStartconfOption(startconf, 'LINBO', 'Server')
    kopts_s = getStartconfOption(startconf, 'LINBO', 'KernelOptions')
    try:
        serverip_k = re.findall(r'server=[^ ]*', kopts_s, re.IGNORECASE)[0].split('=')[1]
    except:
        serverip_k = None
    # determine whether global values from start conf have to changed
    if serverip_k is not None and isValidHostIpv4(serverip_k):
        serverip_r = serverip_k
    else:
        serverip_r = serverip
    if kopts_s is None:
        kopts_r = 'splash quiet'
    else:
        kopts_r = kopts_s
    if group_s != group:
        group_r = group
    else:
        group_r = group
    # change global startconf options if necessary
    if serverip_s != serverip_r:
        rc = setGlobalStartconfOption(startconf, 'Server', serverip_r)
        if not rc:
            return rc
    if kopts_s != kopts_r:
        rc = setGlobalStartconfOption(startconf, 'KernelOptions', kopts_r)
        if not rc:
            return rc
    if group_s != group_r:
        rc = setGlobalStartconfOption(startconf, 'Group', group_r)
        if not rc:
            return rc
    # process grub cfgs
    doGrubCfg(startconf, group, kopts_r)


# opsi
def doOpsi():
    sshcmd = 'ssh -oNumberOfPasswordPrompts=0 -oStrictHostKeyChecking=no'
    rsynccmd = 'rsync -e "' + sshcmd + '"'
    # upload workstations file
    os.system(rsynccmd + ' ' + constants.WIMPORTDATA + ' ' + opsiip + ':' + constants.OPSIWSDATA)
    # execute script
    os.system(sshcmd + ' ' + opsiip + ' ' + constants.OPSIWSIMPORT + ' --quiet')
    # download opsi host keys
    os.system(rsynccmd + ' ' + opsiip + ':' + constants.OPSIPCKEYS + ' ' + constants.LINBOOPSIKEYS)
    os.system('chmod 600 ' + constants.LINBOOPSIKEYS)


# delete old config links
# start.conf-ip
os.system('find ' + constants.LINBODIR + ' -name start.conf-\* -type l -exec rm {} \;')
os.system('find ' + constants.LINBOGRUBDIR + '/hostcfg -name \*.cfg -type l -exec rm {} \;')

# iterate over devices
printScript('', 'begin')
printScript('Processing dhcp clients:')
f = open(devices, newline='')
reader = csv.reader(f, delimiter=';', quoting=csv.QUOTE_NONE)
d = open(constants.DHCPDEVCONF, 'w')
pxe_groups = []
for row in reader:
    if len(row) == 0:
        continue
    try:
        room = row[0]
        if room[:1] == '#' or room[:1] == ';':
            continue
        host = row[1]
        group = row[2]
        mac = row[3]
        ip = row[4]
        dhcpopts = row[7]
        pxe = row[10]
    except:
        printScript('Skipping line: ' + str(row).replace("', '", ';').replace("['", '').replace("']", ''))
        continue
    # get system type from start.conf
    startconf = constants.LINBODIR + '/start.conf.' + group
    systemtype = None
    bootimage = None
    if os.path.isfile(startconf):
        systemtype = getStartconfOption(startconf, 'LINBO', 'SystemType')
    if systemtype is not None:
        if 'bios' in systemtype:
            bootimage = core_bios
        elif 'efi32' in systemtype:
            bootimage = core32_efi
        elif 'efi64' in systemtype:
            bootimage = core64_efi
    # correct pxe type if opsi ip is not valid
    if (pxe == '3' or pxe == '2') and not isValidHostIpv4(opsiip):
        pxe = '1'
    # determine hosttype
    if pxe == '0':
        htype = 'IP-Host : '
    else:
        htype = 'PXE-Host: '
    printScript('* ' + htype + host)
    # write conf for dhcp clients
    d.write('host ' + ip + ' {\n')
    d.write('  hardware ethernet ' + mac + ';\n')
    d.write('  fixed-address ' + ip + ';\n')
    d.write('  option host-name "' + host + '";\n')
    # dhcp options have to be 5 chars minimum to get processed
    if len(dhcpopts) > 4:
        for opt in dhcpopts.split(','):
            d.write('  ' + opt + ';\n')
            # do not write default bootimage if a different one is defined here
            if 'filename' in opt:
                bootimage = None
    # write pxe boot options
    if pxe == '1' or pxe == '2' or pxe == '22':
        d.write('  option extensions-path "' + group + '";\n')
        if bootimage is not None:
            d.write('  filename "' + bootimage + '";\n')
    # boot opsi pxe bootimage
    elif pxe == '3':
        d.write('  next-server ' + opsiip + ';\n')
        d.write('  filename "' + constants.OPSIPXEFILE + '";\n')
    d.write('}\n')
    # create per host links to corresponding group configs
    if pxe != '0':
        # start.conf
        groupconf = 'start.conf.' + group
        hostlink = constants.LINBODIR + '/start.conf-' + ip
        if not os.path.isfile(hostlink):
            os.system('ln -sf ' + groupconf + ' ' + hostlink)
        # grub config
        groupconf = '../' + group + '.cfg'
        hostlink = constants.LINBOGRUBDIR + '/hostcfg/' + host + '.cfg'
        if not os.path.isfile(hostlink):
            os.system('ln -sf ' + groupconf + ' ' + hostlink)
    # collect groups with pxe for later use
    if group not in pxe_groups and pxe != '0':
        pxe_groups.append(group)
d.close()
f.close()

# do opsi stuff if configured
if opsiip != '':
    doOpsi()

# write pxe configs for collected groups
printScript('', 'begin')
printScript('Processing pxe groups:')
for group in pxe_groups:
    msg = '* ' + group
    printScript(msg)
    doLinboStartconf(group)

# execute post hooks
hookpath = constants.POSTDEVIMPORT
hookscripts = [f for f in listdir(hookpath) if isfile(join(hookpath, f)) and os.access(join(hookpath, f), os.X_OK)]
if len(hookscripts) > 0:
    printScript('', 'begin')
    printScript('Executing post hooks:')
    for h in hookscripts:
        hookscript = hookpath + '/' + h
        msg = '* ' + h + ' '
        printScript(msg, '', False, False, True)
        output = subprocess.getoutput(hookscript)
        if output != '':
            print(output)

# restart services
printScript('', 'begin')
printScript('Restarting services:')
maxlen = 17
RC = 0
for service in ['isc-dhcp-server', 'linbo-bittorrent', 'linbo-multicast']:
    gaplen = maxlen - len(service)
    msg = '* ' + service + ' '
    printScript(msg, '', False, False, True)
    for action in ['stop', 'start']:
        result = os.system('service ' + service + ' ' + action)
        if result != 0:
            RC = result
    if RC == 0:
        printScript(' OK!', '', True, True, False, len(msg))
    else:
        printScript(' Failed!', '', True, True, False, len(msg))

# end message
printScript(os.path.basename(__file__), 'end')

sys.exit(RC)
