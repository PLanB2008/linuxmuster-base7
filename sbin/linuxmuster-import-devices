#!/usr/bin/python3
#
# linuxmuster-import-devices
# thomas@linuxmuster.net
# 20200408
#

import configparser
import constants
import os
import re
import subprocess
import sys

from os import listdir
from os.path import isfile, join

from functions import getBootImage, getDevicesArray, getGrubOstype, getGrubPart
from functions import getSetupValue, getStartconfOsValues, getStartconfOption
from functions import getStartconfPartnr, getStartconfPartlabel, getSubnetArray
from functions import isValidHostIpv4, printScript, readTextfile
from functions import setGlobalStartconfOption, writeTextfile

# defaults
devices = constants.WIMPORTDATA
core32_efi = 'boot/grub/i386-efi/core.efi'
core64_efi = 'boot/grub/x86_64-efi/core.efi'
core_bios = 'boot/grub/i386-pc/core.0'

# read INIFILE
setup = configparser.ConfigParser(inline_comment_prefixes=('#', ';'))
setup.read(constants.SETUPINI)
serverip = setup.get('setup', 'serverip')
opsiip = setup.get('setup', 'opsiip')
domainname = setup.get('setup', 'domainname')

# start message
printScript(os.path.basename(__file__), 'begin')

# do sophomorix-devices first
msg = 'Starting sophomorix-device syntax check:'
printScript(msg)
result = os.system('sophomorix-device --dry-run')
msg = 'sophomorix-device finished '
if result != 0:
    printScript(msg + ' errors detected!')
    sys.exit(result)

printScript(msg + ' OK!')
os.system('sophomorix-device --sync')


# functions begin
# write grub cfgs
def doGrubCfg(startconf, group, kopts):
    grubcfg = constants.LINBOGRUBDIR + '/' + group + '.cfg'
    rc, content = readTextfile(grubcfg)
    if rc and constants.MANAGEDSTR not in content:
        return 'present'
    # get grub partition name of cache
    cache = getStartconfOption(startconf, 'LINBO', 'Cache')
    partnr = getStartconfPartnr(startconf, cache)
    systemtype = getStartconfOption(startconf, 'LINBO', 'SystemType')
    cacheroot = getGrubPart(cache, systemtype)
    cachelabel = getStartconfPartlabel(startconf, partnr)
    # if cache is not defined provide a forced netboot cfg
    if cacheroot is None:
        netboottpl = constants.LINBOTPLDIR + '/grub.cfg.forced_netboot'
        os.system('cp ' + netboottpl + ' ' + grubcfg)
        return 'not yet configured!'
    # create return message
    if os.path.isfile(grubcfg):
        msg = 'replaced'
    else:
        msg = 'created'
    # create gobal part for group cfg
    globaltpl = constants.LINBOTPLDIR + '/grub.cfg.global'
    rc, content = readTextfile(globaltpl)
    if not rc:
        return 'error!'
    replace_list = [('@@group@@', group), ('@@cachelabel@@', cachelabel), ('@@cacheroot@@', cacheroot), ('@@kopts@@', kopts)]
    for item in replace_list:
        content = content.replace(item[0], item[1])
    rc = writeTextfile(grubcfg, content, 'w')
    # get os infos from group's start.conf
    oslists = getStartconfOsValues(startconf)
    if oslists is None:
        return 'error!'
    # write os parts to grub cfg
    ostpl = constants.LINBOTPLDIR + '/grub.cfg.os'
    for oslist in oslists:
        osname, partition, kernel, initrd, kappend, osnr = oslist
        osroot = getGrubPart(partition, systemtype)
        ostype = getGrubOstype(osname)
        partnr = getStartconfPartnr(startconf, partition)
        oslabel = getStartconfPartlabel(startconf, partnr)
        # add root to kernel append
        if 'root=' not in kappend:
            kappend = kappend + ' root=' + partition
        rc, content = readTextfile(ostpl)
        if not rc:
            return 'error!'
        replace_list = [('@@group@@', group), ('@@cachelabel@@', cachelabel),
            ('@@cacheroot@@', cacheroot), ('@@osname@@', osname),
            ('@@osnr@@', osnr), ('@@ostype@@', ostype), ('@@oslabel@@', oslabel),
            ('@@osroot@@', osroot), ('@@partnr@@', partnr), ('@@kernel@@', kernel),
            ('@@initrd@@', initrd), ('@@kopts@@', kopts), ('@@append@@', kappend)]
        for item in replace_list:
            content = content.replace(item[0], str(item[1]))
        rc = writeTextfile(grubcfg, content, 'a')
        if not rc:
            return 'error!'
    return msg


# write linbo start configuration file
def doLinboStartconf(group):
    startconf = constants.LINBODIR + '/start.conf.' + group
    # provide unconfigured start.conf if there is none for this group
    if os.path.isfile(startconf):
        if getStartconfOption(startconf, 'LINBO', 'Cache') is None:
            msg1 = 'not yet configured!'
        else:
            msg1 = 'present'
    else:
        msg1 = 'not yet configured!'
        os.system('cp ' + constants.LINBODIR + '/start.conf ' + startconf)
    # read values from start.conf
    group_s = getStartconfOption(startconf, 'LINBO', 'Group')
    serverip_s = getStartconfOption(startconf, 'LINBO', 'Server')
    kopts_s = getStartconfOption(startconf, 'LINBO', 'KernelOptions')
    # get alternative server ip from kernel options
    try:
        serverip_k = re.findall(r'server=[^ ]*', kopts_s, re.IGNORECASE)[0].split('=')[1]
    except Exception as error:
        # print(error)
        serverip_k = None
    # determine whether global values from start conf have to changed
    if serverip_k is not None and isValidHostIpv4(serverip_k):
        serverip_r = serverip_k
    else:
        serverip_r = serverip
    if kopts_s is None:
        kopts_r = 'splash quiet'
    else:
        kopts_r = kopts_s
    if group_s != group:
        group_r = group
    else:
        group_r = group
    # change global startconf options if necessary
    if serverip_s != serverip_r:
        rc = setGlobalStartconfOption(startconf, 'Server', serverip_r)
        if not rc:
            return rc
    if kopts_s != kopts_r:
        rc = setGlobalStartconfOption(startconf, 'KernelOptions', kopts_r)
        if not rc:
            return rc
    if group_s != group_r:
        rc = setGlobalStartconfOption(startconf, 'Group', group_r)
        if not rc:
            return rc
    # process grub cfgs
    msg2 = doGrubCfg(startconf, group, kopts_r)
    # format row in columns for output
    row = [group, msg1, msg2]
    printScript("  {: <15} | {: <20} | {: <20}".format(*row))


# opsi
def doOpsi():
    printScript('', 'begin')
    printScript('Working on opsi integration')
    sshcmd = 'ssh -oNumberOfPasswordPrompts=0 -oStrictHostKeyChecking=no'
    rsynccmd = 'rsync -e "' + sshcmd + '"'
    # upload workstations file
    os.system(rsynccmd + ' ' + constants.WIMPORTDATA + ' ' + opsiip + ':' + constants.OPSIWSDATA)
    # execute script
    os.system(sshcmd + ' ' + opsiip + ' ' + constants.OPSIWSIMPORT + ' --quiet')
    # download opsi host keys
    os.system(rsynccmd + ' ' + opsiip + ':' + constants.OPSIPCKEYS + ' ' + constants.LINBOOPSIKEYS)
    os.system('chmod 600 ' + constants.LINBOOPSIKEYS)


# write dhcp subnet devices config
def writeDhcpDevicesConfig():
    printScript('', 'begin')
    printScript('Working on dhcp configuration for devices')
    opsiip = getSetupValue('opsiip')
    host_decl_tpl = """host @@ip@@ {
  hardware ethernet @@mac@@;
  fixed-address @@ip@@;
  option host-name "@@hostname@@";
"""
    cfgfile = constants.DHCPDEVCONF
    if os.path.isfile(cfgfile):
        os.unlink(cfgfile)
    try:
        # open devices.conf for append
        with open(cfgfile, 'a') as outfile:
            # iterate over the defined subnets
            for subnet_array in getSubnetArray('0'):
                cidr = subnet_array[0]
                # iterate over devices per subnet
                headline = False
                for device_array in getDevicesArray(fieldnrs='1,2,3,4,7,8,10',subnet=cidr,stype=True):
                    if not headline:
                        # write corresponding subnet as a comment
                        outfile.write('# subnet ' + cidr + '\n')
                        printScript('* in subnet ' + cidr + ':')
                        headline = True
                    hostname, group, mac, ip, dhcpopts, computertype, pxeflag, systemtype = device_array
                    if systemtype is None:
                        systemtype = ''
                    if len(computertype) > 15:
                        computertype = computertype[0:15]
                    # format row in columns for output
                    row = [hostname, ip, computertype, pxeflag, systemtype]
                    printScript("  {: <15} | {: <15} | {: <15} | {: <1} | {: <6}".format(*row))
                    # begin host declaration
                    host_decl = host_decl_tpl.replace('@@ip@@', ip).replace('@@mac@@', mac).replace('@@hostname@@', hostname)
                    # only for pxe clients
                    if int(pxeflag) != 0:
                        # opsi pxe boot
                        if pxeflag == '3':
                            bootimage = constants.OPSIPXEFILE
                            host_decl = host_decl + '  filename "' + bootimage + '";\n'
                            host_decl = host_decl + '  next-server ' + opsiip + ';\n'
                        # linbo pxe boot
                        else:
                            host_decl = host_decl + '  option extensions-path "' + group + '";\n'
                            bootimage = getBootImage(systemtype)
                            if 'filename' not in dhcpopts and bootimage is not None:
                                host_decl = host_decl + '  filename "boot/grub/' + bootimage + '";\n'
                            # dhcp options have to be 5 chars minimum to get processed
                            if len(dhcpopts) > 4:
                                for opt in dhcpopts.split(','):
                                    host_decl = host_decl + '  ' + opt + ';\n'
                    # finish host declaration
                    host_decl = host_decl + '}\n'
                    # finall√Ω write host declaration
                    outfile.write(host_decl)
    except Exception as error:
        print(error)
        return False
# functions end


# delete old config links
# start.conf-ip
os.system('find ' + constants.LINBODIR + ' -name start.conf-\* -type l -exec rm {} \;')
os.system('find ' + constants.LINBOGRUBDIR + '/hostcfg -name \*.cfg -type l -exec rm {} \;')


# write dhcp devices.conf
writeDhcpDevicesConfig()


# linbo stuff
printScript('', 'begin')
printScript('Working on linbo/grub configuration for devices:')
pxe_groups = []
for device_array in getDevicesArray(fieldnrs='1,2,4,10', subnet='all', pxeflag='1,2,3'):
    host, group, ip, pxeflag = device_array
    # collect groups with pxe for later use
    if group not in pxe_groups:
        pxe_groups.append(group)
    # format row in columns for output
    row = [host, group]
    printScript("  {: <15} | {: <15}".format(*row))
    groupconf = 'start.conf.' + group
    hostlink = constants.LINBODIR + '/start.conf-' + ip
    if not os.path.isfile(hostlink):
        os.system('ln -sf ' + groupconf + ' ' + hostlink)
    # grub config
    groupconf = '../' + group + '.cfg'
    hostlink = constants.LINBOGRUBDIR + '/hostcfg/' + host + '.cfg'
    if not os.path.isfile(hostlink):
        os.system('ln -sf ' + groupconf + ' ' + hostlink)


# write pxe configs for collected groups
printScript('', 'begin')
printScript('Working on linbo/grub configuration for groups:')
printScript("  {: <15} | {: <20} | {: <20}".format(*[' ', 'linbo start.conf', 'grub cfg']))
printScript("  {: <15}+{: <20}+{: <20}".format(*['-'*16, '-'*22, '-'*21]))
for group in pxe_groups:
    doLinboStartconf(group)


# do opsi stuff if configured
if opsiip != '':
    doOpsi()


# execute post hooks
hookpath = constants.POSTDEVIMPORT
hookscripts = [f for f in listdir(hookpath) if isfile(join(hookpath, f)) and os.access(join(hookpath, f), os.X_OK)]
if len(hookscripts) > 0:
    printScript('', 'begin')
    printScript('Executing post hooks:')
    for h in hookscripts:
        hookscript = hookpath + '/' + h
        msg = '* ' + h + ' '
        printScript(msg, '', False, False, True)
        output = subprocess.getoutput(hookscript)
        if output != '':
            print(output)

# restart services
printScript('', 'begin')
printScript('Restarting services:')
maxlen = 17
RC = 0
for service in ['isc-dhcp-server', 'linbo-bittorrent', 'linbo-multicast']:
    gaplen = maxlen - len(service)
    msg = '* ' + service + ' '
    printScript(msg, '', False, False, True)
    for action in ['stop', 'start']:
        result = os.system('service ' + service + ' ' + action)
        if result != 0:
            RC = result
    if RC == 0:
        printScript(' OK!', '', True, True, False, len(msg))
    else:
        printScript(' Failed!', '', True, True, False, len(msg))

# end message
printScript(os.path.basename(__file__), 'end')

sys.exit(RC)
