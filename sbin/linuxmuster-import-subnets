#!/usr/bin/python3
#
# linuxmuster-import-subnets
# thomas@linuxmuster.net
# 20180618
#

import configparser
import constants
import csv
import datetime
import os
import paramiko
import re
import sys
import uuid
import yaml

from bs4 import BeautifulSoup, NavigableString
from functions import firewallApi
from functions import getFwConfig
from functions import getSftp
from functions import isValidHostIpv4
from functions import modIni
from functions import printScript
from functions import putFwConfig
from functions import putSftp
from functions import readTextfile
from functions import sshExec
from functions import writeTextfile
from IPy import IP

# read necessary values from setup.ini and other sources
setup = configparser.ConfigParser(inline_comment_prefixes=('#', ';'))
setup.read(constants.SETUPINI)
serverip = setup.get('setup', 'serverip')
domainname = setup.get('setup', 'domainname')
opsiip = setup.get('setup', 'opsiip')
dockerip = setup.get('setup', 'dockerip')
firewallip = setup.get('setup', 'firewallip')
skipfw = setup.getboolean('setup', 'skipfw')
bitmask_setup = setup.get('setup', 'bitmask')
network_setup = setup.get('setup', 'network')
ipnet_setup = network_setup + '/' + bitmask_setup

# templates
# gateway
gateways_begin_tag = '<gateways>'
gateways_end_tag = '</gateways>'
gateway_xml = """
        <gateway_item>
            <interface>lan</interface>
            <gateway>@@gateway@@</gateway>
            <name>@@vlangw@@</name>
            <weight>1</weight>
            <ipprotocol>inet</ipprotocol>
            <interval></interval>
            <descr>VLAN Gateway</descr>
            <avg_delay_samples></avg_delay_samples>
            <avg_loss_samples></avg_loss_samples>
            <avg_loss_delay_samples></avg_loss_delay_samples>
            <monitor_disable>1</monitor_disable>
        </gateway_item>
"""
gateway_xml = gateway_xml.replace('@@vlangw@@', constants.VLAN_GW)
# routes
routes_begin_tag = '<staticroutes version="1.0.0">'
routes_end_tag = '</staticroutes>'
route_xml = """
    <route uuid="@@uuid@@">
      <network>@@subnet@@</network>
      <gateway>@@vlangw@@</gateway>
      <descr>@@descr@@</descr>
      <disabled>0</disabled>
    </route>
"""
route_xml = route_xml.replace('@@vlangw@@', constants.VLAN_GW)
# firewall_nat_out
nat_automatic_xml = """
  <nat>
    <outbound>
      <mode>automatic</mode>
    </outbound>
  </nat>
"""
nat_hybrid_begin = """
  <nat>
    <outbound>
      <mode>hybrid</mode>
"""
nat_hybrid_end = """
    </outbound>
  </nat>
"""
nat_rule_xml = """
      <rule>
        <source>
          <network>@@subnet@@</network>
        </source>
        <destination>
          <any>1</any>
        </destination>
        <descr>@@descr@@</descr>
        <interface>wan</interface>
        <tag/>
        <tagged/>
        <poolopts/>
        <ipprotocol>inet</ipprotocol>
        <created>
          <username>root@@@serverip@@</username>
          <time>@@timestamp@@</time>
          <description>linuxmuster-import-subnet made changes</description>
        </created>
        <target/>
        <targetip_subnet>0</targetip_subnet>
        <sourceport/>
      </rule>
"""

## functions begin ##

# update static routes in netplan configuration
def updateNetplan(subnets, remoteip=''):
    if remoteip == '':
        machine = 'server'
    elif remoteip == opsiip:
        machine = 'opsi'
    elif remoteip == dockerip:
        machine = 'docker'
    else:
        printScript('Unknown ip address, skipping netplan configuration.')
        return False
    printScript('Processing netplan configuration on ' + machine + ':')
    if machine == 'server':
        cfgfile = constants.NETCFG
    else:
        # get file per sftp
        cfgfile = '/tmp/' + os.path.basename(constants.NETCFG)
        rc = getSftp(remoteip, constants.NETCFG, cfgfile)
        if rc:
            printScript('* Fetched configuration file from remote machine.')
        else:
            printScript('* Unable to fetch configuration file from remote machine!')
            return False
    # read netplan config file
    with open(cfgfile) as config:
        netcfg = yaml.safe_load(config)
    iface = str(netcfg['network']['ethernets']).split('\'')[1]
    ifcfg = netcfg['network']['ethernets'][iface]
    # first delete the old routes if there are any
    try:
        del ifcfg['routes']
        changed = True
        printScript('* Removed old routes.')
    except:
        changed = False
    # only if there are subnets beside server network
    if len(subnets) > 0:
        changed = True
        ifcfg['routes'] = []
        for item in subnets:
            subnet = item.split(':')[0]
            # tricky: concenate dict object for yaml using eval
            subroute = eval('{"to": ' + '\'' + subnet + '\'' + ', "via": ' + '\'' + servernet_router + '\'' + '}')
            ifcfg['routes'].append(subroute)
        printScript('* Added new routes for all subnets.')
    # save netcfg
    if changed:
        with open(cfgfile, 'w') as config:
            config.write( yaml.dump(netcfg, default_flow_style=False))
        if machine == 'server':
            os.system('netplan apply')
            printScript('* Applied new configuration.')
        else:
            # upload modified netcfg
            rc = putSftp(remoteip, cfgfile, constants.NETCFG)
            if rc:
                printScript('* Configuration transfered.')
            else:
                printScript('* Unable to transfer configuration!')
                return False
            rc = sshExec(remoteip, 'netplan apply')
            if rc:
                printScript('* Configuration applied.')
            else:
                printScript('* Unable to apply configuration!')
                return False
            os.unlink(cfgfile)
    # send changed configuration back and apply it
    return changed

# update opsi network configuration with routes
def updateOpsi(subnets, opsiip, ipnet_setup):
    printScript('Processing opsi network configuration:')
    # first delete routes on opsi, create script and invoke it on opsi server
    remotefile = '/etc/network/if-up.d/999staticroutes'
    content = """
#!/bin/sh
[ -e @@remotefile@@ ] || exit 0
sed -i 's|route add|route del|g' @@remotefile@@
chmod +x @@remotefile@@
@@remotefile@@
rm -f @@remotefile@@
"""
    content = content.replace('@@remotefile@@', remotefile)
    localfile = constants.CACHEDIR + '/opsi_staticroutes'
    remotescript = '/tmp/delroutes'
    try:
        writeTextfile(localfile, content, 'w')
        putSftp(opsiip, localfile, remotescript)
        sshExec(opsiip, 'chmod +x ' + remotescript)
        sshExec(opsiip, remotescript)
        sshExec(opsiip, 'rm -f ' + remotescript)
        printScript('* Removed old routes.')
    except:
        printScript('* Unable to remove old routes!')
        return False
    # return if no subnets were defined
    if len(subnets) == 0:
        return True
    # create new route script if subnets were defined
    content = '#!/bin/sh\n#\n# linuxmuster.net\n# static routes for vlans\n\n'
    try:
        for item in subnets:
            s = item.split(':')[0]
            # skip server network
            if s == ipnet_setup:
                continue
            content = content + 'route add -net ' + s + ' gw ' + servernet_router + '\n'
            writeTextfile(localfile, content, 'w')
        printScript('* Created new routes script.')
    except:
        printScript('* Unable to create routes script!')
        return False
    # transfer and invoke it
    try:
        putSftp(opsiip, localfile, remotefile)
        sshExec(opsiip, 'chmod +x ' + remotefile)
        sshExec(opsiip, remotefile)
        printScript('* Script transfered and applied.')
    except:
        printScript('* Unable to transfer and apply script!.')
        return False
    os.unlink(localfile)
    return True

# update vlan gateway on firewall
def updateFwGw(firewallip, servernet_router, gateway_xml, content):
    if servernet_router == firewallip:
        # in this case no vlan gateway is necessary
        gwflag = False
        msg = 'Removing vlan gateway from firewall:'
    else:
        gwflag = True
        msg = 'Creating vlan gateway on firewall:'
    printScript(msg)
    soup = BeautifulSoup(content, 'lxml')
    # find vlan gateway
    gateways = BeautifulSoup(str(soup.find('gateways')), 'lxml')
    found = ''
    gateway = ''
    changed = False
    for item in gateways.findAll('gateway_item'):
        if item('name')[0].string == constants.VLAN_GW:
            found = str(item)
            gateway = item('gateway')[0].string
    # found obsolete gw, remove it
    if found != '' and not gwflag:
        printScript('* Found obsolete vlan gateway ' + gateway + ', removing it.')
        content = content.replace(found, '')
        changed = True
    # found gateway different from servernet router, need to be changed
    elif found != '' and gwflag and gateway != servernet_router:
        printScript('* Found different vlan gateway ' + gateway + ', changing it to ' + servernet_router + '.')
        gateway_new = found.replace('<gateway>' + gateway + '</gateway>', '<gateway>' + servernet_router + '</gateway>')
        content = content.replace(found, gateway_new)
        changed = True
    # add vlan gw if not defined
    elif found == '' and gwflag:
        printScript('* No vlan gateway found, adding ' + servernet_router + '.')
        gateway_xml = gateway_xml.replace('@@gateway@@', servernet_router)
        if gateways_begin_tag in content:
            content = content.replace(gateways_begin_tag, gateways_begin_tag + gateway_xml)
        else:
            gateway_xml = gateways_begin_tag + gateway_xml + gateways_end_tag + '\n'
            content = content.replace('</ntpd>', '</ntpd>' + gateway_xml)
        changed = True
    else:
        printScript('* Nothing to do.')
        changed =  False
    return changed, content

# update subnet nat rules on firewall
def updateFwNat(subnets, ipnet_setup, serverip, content):
  nat_rules = []
  for item in subnets:
    subnet = item.split(':')[0]
    # skip servernet
    if subnet == ipnet_setup:
      continue
    timestamp = str(datetime.datetime.now(datetime.timezone.utc).timestamp())
    descr = 'NAT rule for subnet ' + subnet
    nat_rule = nat_rule_xml.replace('@@subnet@@', subnet)
    nat_rule = nat_rule.replace('@@serverip@@', serverip)
    nat_rule = nat_rule.replace('@@descr@@', descr)
    nat_rule = nat_rule.replace('@@timestamp@@', timestamp)
    nat_rules.append(nat_rule)
  if len(nat_rules) == 0:
    if nat_automatic_xml in content:
      # nothing to do if standard nat automatic rule is set and no subnets are defined
      return False, content
    else:
      nat_xml = nat_automatic_xml
  else:
    # create nat rules xml code
    nat_xml = nat_hybrid_begin
    for nat_rule in nat_rules:
      nat_xml = nat_xml + nat_rule
    nat_xml = nat_xml + nat_hybrid_end
  # replace code in config content
  content = re.sub(r'<nat>.*?</nat>', nat_xml, content, flags=re.S)
  return True, content

# download, modify and upload firewall config
def updateFw(subnets, firewallip, ipnet_setup, serverip, servernet_router, gateway_xml):
  # first get config.xml
  if not getFwConfig(firewallip):
    return False
  # load configfile
  rc, content = readTextfile(constants.FWCONFLOCAL)
  if not rc:
    return rc
  changed = False
  # add vlan gateway to firewall
  rc, content = updateFwGw(firewallip, servernet_router, gateway_xml, content)
  if rc:
    changed = rc
  # add subnet nat rules to firewall
  rc, content = updateFwNat(subnets, ipnet_setup, serverip, content)
  if rc:
    changed = rc
  if changed:
    # write changed config
    if writeTextfile(constants.FWCONFLOCAL, content, 'w'):
      printScript('* Saved changed config.')
    else:
      printScript('* Unable to save configfile!')
      return False
    if not putFwConfig(firewallip):
      return False
  return changed

# add single route
def addFwRoute(subnet):
    try:
        payload = '{"route": {"network": "' + subnet + '", "gateway": "' + constants.VLAN_GW + '", "descr": "Route for subnet ' + subnet + '", "disabled": "0"}}'
        res = firewallApi('post', '/routes/routes/addroute', payload)
        printScript('* Added route for subnet ' + subnet + '.')
        return True
    except:
        printScript('* Unable to add route for subnet ' + subnet + '!')
        return False

# delete route on firewall by uuid
def delFwRoute(uuid, subnet):
    try:
        rc = firewallApi('post', '/routes/routes/delroute/' + uuid)
        printScript('* Route ' + uuid + ' - ' + subnet + ' deleted.')
        return True
    except:
        printScript('* Unable to delete route ' + uuid + ' - ' + subnet + '!')
        return False

# update firewall routes
def updateFwRoutes(subnets, firewallip, ipnet_setup, servernet_router):
    printScript('Updating subnet routing on firewall:')
    try:
        routes = firewallApi('get', '/routes/routes/searchroute')
        routes_nr = len(routes['rows'])
        printScript('* Got ' + str(routes_nr) + ' routes.')
    except:
        printScript('* Unable to get routes.')
        return False
    # iterate through firewall routes and delete them if necessary
    changed = False
    gateway_orig = constants.VLAN_GW + ' - ' + servernet_router
    if routes_nr > 0:
        count = 0
        while (count < routes_nr):
            uuid = routes['rows'][count]['uuid']
            subnet = routes['rows'][count]['network']
            gateway = routes['rows'][count]['gateway']
            # delete not compliant routes
            if (not subnet in str(subnets) and gateway == gateway_orig) or (subnet in str(subnets) and gateway != gateway_orig):
                delFwRoute(uuid, subnet)
                printScript('* Route ' + subnet + ' deleted.')
                changed = True
            count += 1
    # get changed routes
    if changed:
        routes = firewallApi('get', '/routes/routes/searchroute')
    # find and collect routes to be added
    for subnet in subnets:
        # extract subnet from string
        s = subnet.split(':')[0]
        # skip server network
        if s == ipnet_setup:
            continue
        if not s in str(routes):
            rc = addFwRoute(s)
            if rc:
                changed = rc
    return changed

## functions end ##


# iterate over subnets
printScript('linuxmuster-import-subnets')
printScript('', 'begin')
printScript('Reading setup data:')
printScript('* Server address: ' + serverip)
printScript('* Server network: ' + ipnet_setup)
printScript('Processing dhcp subnets:')
f = open(constants.SUBNETSCSV, newline='')
reader = csv.reader(f, delimiter=';', quoting=csv.QUOTE_NONE)
d = open(constants.DHCPSUBCONF, 'w')
subnets = []
for row in reader:
    try:
        ipnet, router, range1, range2 = row
    except:
        continue
    if ipnet[:1] == '#' or ipnet[:1] == ';' or not isValidHostIpv4(router):
        continue
    if not isValidHostIpv4(range1) or not isValidHostIpv4(range2):
        range1 = ''
        range2 = ''
    # compute network data
    try:
        n = IP(ipnet, make_net=True)
        network = IP(n).strNormal(0)
        netmask = IP(n).strNormal(2).split('/')[1]
        broadcast = IP(n).strNormal(3).split('-')[1]
    except:
        continue
    # save servernet router address for later use
    if ipnet == ipnet_setup:
        servernet_router = router
        supp_info = 'server network'
    else:
        supp_info = ''
    subnets.append(ipnet + ':' + router)
    # write subnets.conf
    printScript('* ' + ipnet)
    d.write('# Subnet ' + ipnet + ' ' + supp_info + '\n')
    d.write('subnet ' + network + ' netmask ' + netmask + ' {\n')
    d.write('  option routers ' + router + ';\n')
    d.write('  option subnet-mask ' + netmask + ';\n')
    d.write('  option broadcast-address ' + broadcast + ';\n')
    d.write('  option netbios-name-servers ' + serverip + ';\n')
    if range1 != '':
        d.write('  range ' + range1 + ' ' + range2 + ';\n')
    d.write('  option host-name pxeclient;\n')
    d.write('}\n')
d.close()
f.close()

# restart dhcp service
printScript('Restarting dhcp service.')
os.system('systemctl restart isc-dhcp-server.service')

# update netplan config with new routes for server (localhost)
changed = updateNetplan(subnets)

# update netplan config with new routes for dockerhost
if isValidHostIpv4(dockerip):
    changed = updateNetplan(subnets, dockerip)

# create static routes for opsi
if isValidHostIpv4(opsiip):
    changed = updateOpsi(subnets, opsiip, ipnet_setup)

# update firewall
if not skipfw:
    changed = updateFw(subnets, firewallip, ipnet_setup, serverip, servernet_router, gateway_xml)
    if changed:
        changed = firewallApi('post', '/routes/routes/reconfigure')
        if changed:
            printScript('Applied new gateway.')
    changed = updateFwRoutes(subnets, firewallip, ipnet_setup, servernet_router)
    if changed:
        changed = firewallApi('post', '/routes/routes/reconfigure')
        if changed:
            printScript('Applied new routes.')
